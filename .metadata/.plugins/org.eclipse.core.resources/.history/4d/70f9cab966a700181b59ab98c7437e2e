package boj;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

public class q15686 {
	static int arr[][];
	static ArrayList<Pair> store;
	static ArrayList<Pair> person;
	static int max;
	static int N;
	static int M;
	static int min = Integer.MAX_VALUE;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		String str[] = br.readLine().split(" ");
		N = Integer.parseInt(str[0]);
		M = Integer.parseInt(str[1]);
		store = new ArrayList<Pair>();
		person = new ArrayList<Pair>();
		arr = new int[N][N];
		ArrayList<Pair> res = new ArrayList<Pair>();
		
		for(int i=0; i<N; i++){
			str = br.readLine().split(" ");
			for(int j=0; j<N; j++){
				if(Integer.parseInt(str[j])==2){
					store.add(new Pair(i,j));
				}else if(Integer.parseInt(str[j])==1){
					person.add(new Pair(i,j));
				}
			}
		}
		boolean check[] = new boolean[store.size()];
		dfs(0,0,res,check);
	}
	
	public static void dfs(int start, int depth, ArrayList<Pair> res, boolean check[]){	
		if(depth==M){
			int sum = calSum(res);
			min = Math.min(min, sum);
			return;
		}
		for(int i= start; i< store.size(); i++){
			if(check[i])
				continue;
			check[i] = true;
			res.add(store.get(i));
			dfs(i+1, depth+1, res, check);
			res.remove(res.size()-1);
			check[i] = false;
		}
	}
	public static int calSum(ArrayList<Pair> res){
		int sum = 0;
		for(int i=0; i<person.size(); i++){
			Pair p1 = person.get(i);
			int len = Integer.MAX_VALUE;
			for(int j=0; j<res.size(); j++){
				Pair p2 = res.get(i);
				int temp = Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);
				len = Math.min(len, temp);
			}
			sum += len;
		}
		return sum;
	}
	
	public static int distance(int x1, int y1, int x2, int y2){
		return Math.abs(x1-x2)+Math.abs(y1-y2);
	}
}
class Pair{
	int x;
	int y;
	public Pair(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}
	
}
