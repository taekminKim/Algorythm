package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class q14503 {
	static int arr[][];
	static int dx[] = {-1, 0, 1, 1};
	static int dy[] = {0, -1, 0, 1};
	static boolean visit[][];
	static Direction dir;
	static int d;
	/*
	 * 북(0)-> 서(3) -> 남(2) -> 동(1) 
	 * (0,1) -> (-1,0) -> (0,-1) -> (1,0)
	 */
	//방향 d는
	//0 : 북   1: 동
	//2 : 남   3: 서
	static int count = 0; //청소할때만 count세줌.
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String str[] = br.readLine().split(" ");
		int N = Integer.parseInt(str[0]);
		int M = Integer.parseInt(str[1]);
		arr = new int[N+1][M+1];
		visit = new boolean[N+1][M+1];
		str = br.readLine().split(" ");
		int r = Integer.parseInt(str[0]);
		int c = Integer.parseInt(str[1]);
		d = Integer.parseInt(str[2]); //방향
		for(int i=1; i<=N; i++){
			str = br.readLine().split(" ");
			for(int j=1; j<=M; j++){
				arr[i][j] = Integer.parseInt(str[j]);
			}
		}
		dfs(r,c,d);
	}
	
	public static void dfs(int r, int c, int d){
		// 네방향 모두 청소가 이미 되어있거나 벽이면서
		// 뒤쪽 방향이 벽이라 후진도 할 수 없는경우 작동 중지.
		int temp_dir = d;
		findCurrentDir(d);
		rotate(temp_dir);
		if(arr[r+dir.x][c+dir.y]==0 && visit[r+dir.x][c+dir.y]==false){
			//0이면서 방문하지 않은경우 = 청소할 가능성 있음.
			
		}
	}
	public static void findCurrentDir(int d){
		if(d==0){
			dir.x = 0;
			dir.y = 1;
		}else if(d==1){
			dir.x = 1;
			dir.y = 0;
		}else if(d==2){
			dir.x = 0;
			dir.y = -1;
		}else if(d==3){
			dir.x = -1;
			dir.y = 0;
		}
	}
	
	public static void rotate(int d){
		if(d==0){
			dir.x = -1;
			dir.y = 0;
		}else if(d==1){
			dir.x = 0;
			dir.y = 1;
		}else if(d==2){
			dir.x = 1;
			dir.y = 0;
		}else if(d==3){
			dir.x = 0;
			dir.y = -1;
		}
	}
	
	
}
class Direction{
	int x;
	int y;
	public Direction(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}
}